@inject HttpClientService httpClientService

<div class="reportedMessageContainer">
    @if(ReportedMessage != null)
    {
        <div class="contextContainer">
            <table style="font-size: 16px; width: 200px;">
                <tr>
                    <td>Credibility of report:</td>
                    <td>@ReportedMessage.Credibility</td>
                </tr>
                <tr>
                    <td>Relevancy of report:</td>
                    <td>@ReportedMessage.Risk</td>
                </tr>
                <tr>
                    <td>Detected Violence:</td>
                    <td>@ReportedMessage.Violence</td>
                </tr>
                <tr>
                    <td>Detected Hate:</td>
                    <td>@ReportedMessage.HateSpeech</td>
                </tr>
                <tr>
                    <td>Detected Vulgarity:</td>
                    <td>@ReportedMessage.Vulgarity</td>
                </tr>
                <tr>
                    <td>Detected Risk:</td>
                    <td>@ReportedMessage.Risk</td>
                </tr>
            </table>
        </div>
        <div class="messagesContainer">
        @if(RelatedMessagesSorted?.Count > 0)
        {
            foreach(var relatedMessage in RelatedMessagesSorted)
            {
                @if(relatedMessage.Id == ReportedMessage.Id)
                {
                    <div class="MessageContainer" style="display: grid; align-items: center; justify-items: center;">
                        <h3>Inspected User: @relatedMessage.Date.ToString("T", CultureInfo.CreateSpecificCulture("de-DE"))</h3>
                        <h2 style="margin-top: 5px;">@relatedMessage.RawMessage</h2>
                    </div>
                }
                else if(relatedMessage.AccountId == ReportedMessage.AccountId)
                {
                    <div class="OtherMessagesFromUserContainer" style="display: grid; align-items: center; justify-items: center;">
                        <h3>Inspected User: @relatedMessage.Date.ToString("T", CultureInfo.CreateSpecificCulture("de-DE"))</h3>
                        <h2 style="margin-top: 5px;">@relatedMessage.RawMessage</h2>
                    </div>
                }
                else
                {
                    <div class="OtherMessageContainer">
                        <div style="display: grid; align-items: center; justify-items: center;">
                            <h3>User @AccountsTuples.First(a => a.Item2 == relatedMessage.AccountId).Item1: @relatedMessage.Date.ToString("T", CultureInfo.CreateSpecificCulture("de-DE"))</h3>
                            <h2 style="margin-top: 5px;">@relatedMessage.RawMessage</h2>
                        </div>      
                    </div>
                }
            }
        }
        </div>
    <div class="buttonContainer">
        <AnalyzeMicrophoneComponent ReportFinished="async(r) => await ReportFinished.InvokeAsync(r)" SelectedMessage="reportedMessage" @ref="analyzeMicrophoneComponent" MicrophoneAnalyzedEventCallback="(t) => { result = t.result; StateHasChanged();}"></AnalyzeMicrophoneComponent>
    </div>
    } 
</div>


@code{
    [Parameter]
    public EventCallback<MessageDTO> ReportFinished { get; set; }

    private MessageDTO reportedMessage;
    private AnalyzeMicrophoneComponent analyzeMicrophoneComponent;
    private string result;

    [Parameter]
    public MessageDTO ReportedMessage
    {
        get => reportedMessage;
        set
        {
            reportedMessage = value;
            Fetch();
        }
    }

    public List<MessageDTO> RelatedMessages { get; set; } = new List<MessageDTO>();

    public List<MessageDTO> RelatedMessagesSorted => RelatedMessages?.ToList();

    private bool WeHaveASituation;

    private List<(int, string)> AccountsTuples = new List<(int, string)>();

    public async Task Fetch()
    {
        RelatedMessages = await httpClientService.GetFromAPIAsync<List<MessageDTO>>($"/messages/relatedMessages/{ReportedMessage.Id}");
        AccountsTuples.AddRange(RelatedMessages.DistinctBy(b => b.AccountId).Where(a => a.AccountId != reportedMessage.AccountId).Select((r, i) => (i + 1, r.AccountId)));
        AccountsTuples.Add(new(0, reportedMessage.AccountId));
        analyzeMicrophoneComponent.Reset();

        StateHasChanged();
    }
}
